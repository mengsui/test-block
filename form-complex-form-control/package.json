{
  "name": "@umi-block/form-complex-form-control",
  "version": "1.0.0",
  "description": "这里演示 `Form.Item` 内有多个元素的使用方式。`<Form.Item name=\"field\" />` 只会对它的直接子元素绑定表单功能，例如直接包裹了 Input/Select。如果控件前后还有一些文案或样式装点，或者一个表单项内有多个控件，你可以使用内嵌的 `Form.Item` 完成。你可以给 `Form.Item` 自定义 `style` 进行内联布局，或者添加 `noStyle` 作为纯粹的无样式绑定组件（类似 3.x 中的 `getFieldDecorator`）。\n\n```diff\n- <Form.Item label=\"Field\" name=\"field\">\n-   <Input />\n- </Form.Item>\n+ <Form.Item label=\"Field\">\n+   <Form.Item name=\"field\" noStyle><Input /></Form.Item> // 直接包裹才会绑定表单\n+   <span>description</span>\n+ </Form.Item>\n```\n\n这里展示了三种典型场景：\n\n- `Username`：输入框后面有描述文案或其他组件，在 `Form.Item` 内使用 `<Form.Item name=\"field\" noStyle />` 去绑定对应子控件。\n- `Address`：有两个控件，在 `Form.Item` 内使用两个 `<Form.Item name=\"field\" noStyle />` 分别绑定对应控件。\n- `BirthDate`：有两个内联控件，错误信息展示各自控件下，使用两个 `<Form.Item name=\"field\" />` 分别绑定对应控件，并修改 `style` 使其内联布局。\n\n> 注意，在 label 对应的 Form.Item 上不要在指定 `name` 属性，这个 Item 只作为布局作用。\n\n更复杂的封装复用方式可以参考下面的 `自定义表单控件` 演示。",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "start-c": "node src/index.js -c",
    "dev": "umi dev",
    "test": "jest --config .jest.js --no-cache"
  },
  "license": "MIT",
  "dependencies": { "@ant-design/icons": "^4.0.2", "antd": "^4.0.0" }
}
